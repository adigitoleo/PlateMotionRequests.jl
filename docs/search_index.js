var documenterSearchIndex = {"docs":
[{"location":"demos/#Demonstrations","page":"Demonstrations","title":"Demonstrations","text":"","category":"section"},{"location":"demos/","page":"Demonstrations","title":"Demonstrations","text":"Please check the README for a quick overview. To follow these demonstrations, it is first necessary to get some plate motion data:","category":"page"},{"location":"demos/","page":"Demonstrations","title":"Demonstrations","text":"julia> using PlateMotionRequests\njulia> latitudes = -40:10:40\njulia> longitudes = 110:10:210\njulia> GSRMdata = platemotion(\n           repeat(latitudes, length(longitudes)),\n           repeat(longitudes, inner = length(latitudes)),\n       )","category":"page"},{"location":"demos/#Acessing-response-data","page":"Demonstrations","title":"Acessing response data","text":"","category":"section"},{"location":"demos/","page":"Demonstrations","title":"Demonstrations","text":"The data is stored in a Table. Note that the calculator knows how to handle longitude values greater than 180°, but whatever values are given will also end up in the response table. The number and name of the columns depends on the requested format. To list the available columns, use columnnames:","category":"page"},{"location":"demos/","page":"Demonstrations","title":"Demonstrations","text":"julia> using TypedTables  # install this package using `] add TypedTables`\njulia> columnnames(GSRMdata)\n(:lon, :lat, :velocity_east, :velocity_north, :plate_and_reference, :model)","category":"page"},{"location":"demos/","page":"Demonstrations","title":"Demonstrations","text":"Columns are accessed as fields of the table, e.g.:","category":"page"},{"location":"demos/","page":"Demonstrations","title":"Demonstrations","text":"julia> GSRMdata.velocity_east\n99-element Vector{Float64}:\n  40.67\n  42.17\n  42.4\n  41.35\n  24.79\n  27.08\n  28.56\n  29.17\n  28.9\n  34.18\n  37.13\n  38.95\n   ⋮\n -61.79\n -56.93\n -50.35\n -54.32\n -60.03\n -63.91\n -65.85\n -65.81\n -63.78\n -59.82\n -54.05\n -46.64","category":"page"},{"location":"demos/","page":"Demonstrations","title":"Demonstrations","text":"Rows are accessed by index, e.g.:","category":"page"},{"location":"demos/","page":"Demonstrations","title":"Demonstrations","text":"julia> GSRMdata[1]\n(lon = 110.0, lat = -40.0, velocity_east = 40.67, velocity_north = 56.92, plate_and_reference = \"AU(NNR)\", model = \"GSRM v2.1\")\njulia> typeof(ans)\nNamedTuple{(:lon, :lat, :velocity_east, :velocity_north, :plate_and_reference, :model), Tuple{Float64, Float64, Float64, Float64, String, String}}","category":"page"},{"location":"demos/","page":"Demonstrations","title":"Demonstrations","text":"For more advanced manipulations, refer to the documentation for TypedTables and Table.","category":"page"},{"location":"demos/#Plate-motion-map-using-GMT.jl","page":"Demonstrations","title":"Plate motion map using GMT.jl","text":"","category":"section"},{"location":"demos/","page":"Demonstrations","title":"Demonstrations","text":"To plot the plate motion using GMT we can use the GMT.jl package. Let's also save the data so we can come back and adjust the plot later. The NetCDF writer could be used here, because it automatically puts the data into matrices. This will be convenient for plotting with GMT.","category":"page"},{"location":"demos/","page":"Demonstrations","title":"Demonstrations","text":"julia> write_platemotion(\"platemotion.nc\", GSRMdata)","category":"page"},{"location":"demos/","page":"Demonstrations","title":"Demonstrations","text":"To read the NetCDF file, the NCDatasets.jl package is recommended. These commands should plot the data as vectors on a map:","category":"page"},{"location":"demos/","page":"Demonstrations","title":"Demonstrations","text":"julia> using GMT\n\njulia> using NCDatasets\n\njulia> ds = NCDataset(\"platemotion.nc\")\n\njulia> coast(\n           region = (110, 210, -35, 45),\n           projection = :Mercator,\n           frame = :auto,\n           land = :dimgray,\n           water = :darkgray,\n           shore = :thinner,\n       )\n\njulia> grdvector!(\n           mat2grid(ds[\"velocity_east\"][:], x = ds[\"lon\"][:], y = ds[\"lat\"][:]),\n           mat2grid(ds[\"velocity_north\"][:], x = ds[\"lon\"][:], y = ds[\"lat\"][:]),\n           arrow = (; shape = 0, stop = true, length = 0.2, angle = 45, pen = :white),\n           fill = :white,\n           vec_scale = 100,\n           linecolor = :white,\n           linewidth = :thinner,\n           show = true,\n       )\n","category":"page"},{"location":"demos/","page":"Demonstrations","title":"Demonstrations","text":"(Image: )","category":"page"},{"location":"demos/#Plate-motion-map-using-GMT","page":"Demonstrations","title":"Plate motion map using GMT","text":"","category":"section"},{"location":"demos/","page":"Demonstrations","title":"Demonstrations","text":"If the GMT.jl package isn't working, well... help us fix it! But if you really want to use command line GMT, just save the data to a text file:","category":"page"},{"location":"demos/","page":"Demonstrations","title":"Demonstrations","text":"julia> write_platemotion(\"platemotion.dat\", GSRMdata)","category":"page"},{"location":"demos/","page":"Demonstrations","title":"Demonstrations","text":"This example GMT script should plot the data as vectors on a map. In general, the scaling parameters will need to be adjusted depending on the map size. You might also need to re-download the data using format = \"psvelo\".","category":"page"},{"location":"demos/","page":"Demonstrations","title":"Demonstrations","text":"#!/bin/sh\n\ngmt begin platemotion\n    gmt psbasemap -R110/210/-40/40 -JM14c -Baf -BWSen\n    gmt grdimage @earth_relief_10m -JM -n+a -t60\n    gmt psvelo platemotion.dat -Se0.015/0.95 -Gblack -W1c,black -h1\ngmt end show\n","category":"page"},{"location":"demos/","page":"Demonstrations","title":"Demonstrations","text":"(Image: )","category":"page"},{"location":"changelog/#Changelog","page":"Changelog","title":"Changelog","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"Notable changes to this project are documented here.","category":"page"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.","category":"page"},{"location":"changelog/#[3.0.0]-:-2022-01-18","page":"Changelog","title":"[3.0.0] : 2022-01-18","text":"","category":"section"},{"location":"changelog/#Changed","page":"Changelog","title":"Changed","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"the output file header format, to no longer use # as the first column (because it makes reading the file in Julia/Python more straightforward, however plotting with GMT now requires a -h1 flag)","category":"page"},{"location":"changelog/#Added","page":"Changelog","title":"Added","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"User-Agent string to the HTTP.jl header, indicating the package version and the Juila version\nexperimental NetCDF writer","category":"page"},{"location":"changelog/#Removed","page":"Changelog","title":"Removed","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"buggy platemotion method that accepted WGS-84 XYZ coordinate input","category":"page"},{"location":"changelog/#[2.0.2]-:-2021-11-23","page":"Changelog","title":"[2.0.2] : 2021-11-23","text":"","category":"section"},{"location":"changelog/#Changed-2","page":"Changelog","title":"Changed","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"platemotion, to fix the MethodError when using non-integer lon/lat inputs\nplatemotion documentation, to warn about WGS-84 XYZ input method deprecation","category":"page"},{"location":"changelog/#[2.0.1]-:-2021-09-03","page":"Changelog","title":"[2.0.1] : 2021-09-03","text":"","category":"section"},{"location":"changelog/#Changed-3","page":"Changelog","title":"Changed","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"contributor guidelines","category":"page"},{"location":"changelog/#[2.0.0]-:-2021-08-22","page":"Changelog","title":"[2.0.0] : 2021-08-22","text":"","category":"section"},{"location":"changelog/#Changed-4","page":"Changelog","title":"Changed","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"error messages, to adhere to the internal guidelines","category":"page"},{"location":"changelog/#Added-2","page":"Changelog","title":"Added","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"documentation pages, including GMT map demonstration\nwrite_platemotion and read_platemotion methods for writing/reading text files","category":"page"},{"location":"changelog/#Removed-2","page":"Changelog","title":"Removed","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"single-location query methods, because they produced incorrect output for site names","category":"page"},{"location":"#PlateMotionRequests","page":"PlateMotionRequests","title":"PlateMotionRequests","text":"","category":"section"},{"location":"","page":"PlateMotionRequests","title":"PlateMotionRequests","text":"A Julia package for plate motion data requests using the UNAVCO Plate Motion Calculator[server].","category":"page"},{"location":"","page":"PlateMotionRequests","title":"PlateMotionRequests","text":"The package is open source, and the code is available[repo] for free under the Zero-Clause BSD license[license]. There is also a website with online documentation[docs].","category":"page"},{"location":"","page":"PlateMotionRequests","title":"PlateMotionRequests","text":"Versions prior to 2.0.1 were experimental and should be avoided if possible.","category":"page"},{"location":"#Installation","page":"PlateMotionRequests","title":"Installation","text":"","category":"section"},{"location":"","page":"PlateMotionRequests","title":"PlateMotionRequests","text":"From the Julia shell, switch to package mode with ] and run","category":"page"},{"location":"","page":"PlateMotionRequests","title":"PlateMotionRequests","text":"add https://git.sr.ht/~adigitoleo/PlateMotionRequests.jl","category":"page"},{"location":"","page":"PlateMotionRequests","title":"PlateMotionRequests","text":"For advanced packaging instructions, refer to the Julia Pkg docs.","category":"page"},{"location":"#Usage","page":"PlateMotionRequests","title":"Usage","text":"","category":"section"},{"location":"","page":"PlateMotionRequests","title":"PlateMotionRequests","text":"Save data whenever possible to avoid repeating requests to the UNAVCO server. Note that the provided methods do not implement any network limits.","category":"page"},{"location":"","page":"PlateMotionRequests","title":"PlateMotionRequests","text":"julia> using PlateMotionRequests\njulia> latitudes = -20:10:20\njulia> longitudes = 160:10:200\njulia> GSRMdata = platemotion(\n           repeat(latitudes, length(longitudes)),\n           repeat(longitudes, inner = length(latitudes)),\n       )","category":"page"},{"location":"","page":"PlateMotionRequests","title":"PlateMotionRequests","text":"Data can be written to/read from storage using write_platemotion and read_platemotion. These functions write/read simple tab-delimited text files. By using the .nc file extension, you can tell write_platemotion to use an experimental NetCDF output format. To store binary representations, the Serialization module from Julia's standard library may prove useful. Other formats like HDF5 or ASDF may be preferred, depending on your requirements.","category":"page"},{"location":"","page":"PlateMotionRequests","title":"PlateMotionRequests","text":"Responses are tabulated using TypedTables.jl, e.g.:","category":"page"},{"location":"","page":"PlateMotionRequests","title":"PlateMotionRequests","text":"Table with 6 columns and 25 rows:\n      lon    lat    velocity_east  velocity_north  plate_and_reference  model\n    ┌────────────────────────────────────────────────────────────────────────────\n 1  │ 160.0  -20.0  25.53          49.46           AU(NNR)              GSRM v2.1\n 2  │ 160.0  -10.0  -61.14         25.72           PA(NNR)              GSRM v2.1\n 3  │ 160.0  0.0    -65.81         25.72           PA(NNR)              GSRM v2.1\n 4  │ 160.0  10.0   -68.49         25.72           PA(NNR)              GSRM v2.1\n 5  │ 160.0  20.0   -69.1          25.71           PA(NNR)              GSRM v2.1\n 6  │ 170.0  -20.0  -56.25         29.02           PA(NNR)              GSRM v2.1\n 7  │ 170.0  -10.0  -61.97         29.02           PA(NNR)              GSRM v2.1\n 8  │ 170.0  0.0    -65.81         29.03           PA(NNR)              GSRM v2.1\n 9  │ 170.0  10.0   -67.66         29.02           PA(NNR)              GSRM v2.1\n 10 │ 170.0  20.0   -67.48         29.02           PA(NNR)              GSRM v2.1\n 11 │ 180.0  -20.0  20.45          35.23           AU(NNR)              GSRM v2.1\n 12 │ 180.0  -10.0  -62.88         31.45           PA(NNR)              GSRM v2.1\n ⋮  │   ⋮      ⋮          ⋮              ⋮                  ⋮               ⋮","category":"page"},{"location":"","page":"PlateMotionRequests","title":"PlateMotionRequests","text":"Change the model and reference frame using the model and reference keywords, respectively. For a no-net-rotation frame, use the value \"NNR\" (default). The model argument accepts the value \"all\", to query all available models for the data.","category":"page"},{"location":"","page":"PlateMotionRequests","title":"PlateMotionRequests","text":"Change output formats using the format keyword. The supported output formats are \"ascii\" (default), \"ascii_xyz\" (WGS-84 coordinates) and \"psvelo\" (GMT 'psvelo' format).","category":"page"},{"location":"","page":"PlateMotionRequests","title":"PlateMotionRequests","text":"For the full list of options, see ?platemotion. You may also want to refer to the UNAVCO website linked above.","category":"page"},{"location":"","page":"PlateMotionRequests","title":"PlateMotionRequests","text":"The author is not affiliated with UNAVCO and cannot guarantee stability of the server.","category":"page"},{"location":"#Feedback-and-contributions","page":"PlateMotionRequests","title":"Feedback and contributions","text":"","category":"section"},{"location":"","page":"PlateMotionRequests","title":"PlateMotionRequests","text":"Please use the public mailing list for feedback and discussion:","category":"page"},{"location":"","page":"PlateMotionRequests","title":"PlateMotionRequests","text":"~adigitoleo/platemotionrequests.jl-devel@lists.sr.ht","category":"page"},{"location":"","page":"PlateMotionRequests","title":"PlateMotionRequests","text":"Contributions are handled via patches sent to the same mailing list. Contributor guidelines are provided with the source code repository[repo] (in the file CONTRIBUTING.md). The file TODO.md lists some ideas for planned features. If you want to work on one of them, send an email first to check if an implementation is already underway.","category":"page"},{"location":"","page":"PlateMotionRequests","title":"PlateMotionRequests","text":"[repo]: https://git.sr.ht/~adigitoleo/PlateMotionRequests.jl","category":"page"},{"location":"","page":"PlateMotionRequests","title":"PlateMotionRequests","text":"[license]: https://git.sr.ht/~adigitoleo/PlateMotionRequests.jl/blob/main/LICENSE","category":"page"},{"location":"","page":"PlateMotionRequests","title":"PlateMotionRequests","text":"[docs]: https://adigitoleo.github.io/PlateMotionRequests.jl/","category":"page"},{"location":"","page":"PlateMotionRequests","title":"PlateMotionRequests","text":"[server]: https://www.unavco.org/software/geodetic-utilities/plate-motion-calculator/plate-motion-calculator.html","category":"page"},{"location":"#API-Reference","page":"PlateMotionRequests","title":"API Reference","text":"","category":"section"},{"location":"","page":"PlateMotionRequests","title":"PlateMotionRequests","text":"PlateMotionRequests\nplatemotion\nwrite_platemotion\nread_platemotion","category":"page"},{"location":"#PlateMotionRequests","page":"PlateMotionRequests","title":"PlateMotionRequests","text":"Plate motion data requests using the UNAVCO Plate Motion Calculator.\n\nExported names:\n\nplatemotion\nread_platemotion\nwrite_platemotion\n\n\n\n\n\n","category":"module"},{"location":"#PlateMotionRequests.platemotion","page":"PlateMotionRequests","title":"PlateMotionRequests.platemotion","text":"platemotion(lats, lons, heights; kwargs...)\nplatemotion(lats, lons; kwargs...)\nplatemotion(XYZ, kwargs...)\n\nRequest plate motion data from the UNAVCO Plate Motion Calculator. Headers and metadata are stripped from the output, which is parsed into a Table. Accepts either separate vectors for latitude, longitude and optionally height. The XYZ input method is deprecated, and will be removed in the next release.\n\nnote: Note\nSite names are not supported. Only 'ansii', 'ansii_xyz' and 'psvelo' formats are supported. Not all optional argument permutations are permitted, see the website linked above for further details.\n\nOptional arguments:\n\nmodel: The plate motion model to use for calculations, or GSRM v2.1 by default.\nplate: The tectonic plate of attributed motion, or automatic plate selection by default.\nreference: The fixed reference plate, or NNR (No Net Rotation) by default.\nup_lat: Custom coordinate of the Euler pole (attributed motion) in decimal degrees.\nup_lon: See above.\nup_w: Custom rotation rate (attributed motion) in degrees per million years.\nup_x: Custom component of the Euler pole (attributed motion) in degrees per million years.\nup_y: See above.\nup_z: See above.\nur_lat: Custom coordinate of the Euler pole (reference velocity) in decimal degrees.\nur_lon: See above.\nur_w: Custom rotation rate of the Euler pole (reference velocity) in degrees per million years.\nur_x: Custom component of the Euler pole (reference velocity) in degrees per million years.\nur_y: See above.\nur_z: See above.\nformat: Output format for the data section of the response, or ASCII by default.\n\n\n\n\n\n","category":"function"},{"location":"#PlateMotionRequests.write_platemotion","page":"PlateMotionRequests","title":"PlateMotionRequests.write_platemotion","text":"write_platemotion(file, table)\n\nWrite plate motion table to file as tab-delimited text columns. The first line written is a tab-delimited header containing the column names. Note that the first header column is a comment marker (#), not a column name.\n\n\n\n\n\n","category":"function"},{"location":"#PlateMotionRequests.read_platemotion","page":"PlateMotionRequests","title":"PlateMotionRequests.read_platemotion","text":"read_platemotion(file)\n\nRead tab-delimited plate motion data from file. Expects a single tab-delimited header line (starting with a comment marker), with column names that match one of the supported formats. See platemotion for details.\n\n\n\n\n\n","category":"function"}]
}
